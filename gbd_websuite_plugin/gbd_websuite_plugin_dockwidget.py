# -*- coding: utf-8 -*-
"""
/***************************************************************************
 gbdWebsuiteDockWidget
                                 A QGIS plugin
 Plugin zur einfachen Bereitstellung eines GBD Websuite Projektes.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-27
        git sha              : $Format:%H$
        copyright            : (C) 2020 by GBD
        email                : info@gbd-consult.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

###
# standard library imports
###
import os
import shutil
import tempfile
import xml.etree.ElementTree as ET
import json
import webbrowser
import time
import requests as r
import pathlib

#test
#import threading

###
# third party imports
###

# cartographic projections and coordinate transformations library
import pyproj

# python bindings for QT application Framework
from qgis.PyQt import QtGui, uic
from qgis.PyQt.QtWidgets import (
    QDockWidget,
    QMessageBox,
    QTableWidgetItem,
    QWidget, QApplication,
    QHBoxLayout,
    QPushButton,
    QTextBrowser,
    QLabel,
    QMainWindow,
    QHeaderView
)
from qgis.PyQt.QtCore import pyqtSignal, QFileInfo, QThread, Qt, QUrl

# Python QGIS API
from qgis.utils import iface
from qgis.core import (
    QgsApplication,
    QgsProject,
    QgsVectorFileWriter,
    QgsAuthMethodConfig
)

###
# local imports
###
from .gws_api import gws_api_call, as_uid
from .gws_password import encode
from .gbd_hash import GbdManagerHash
#from gbd_modules import gws_api, gws_password

from .dw_b_options import button_options

#pb
#from .gbd_websuite_progressBar import progressBar

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gbd_websuite_plugin_dockwidget_base.ui'))


class gbdWebsuiteDockWidget(QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    #pb
    # countChanged = pyqtSignal(int)

    def __init__(self, parent=None):
        """Constructor."""
        super(gbdWebsuiteDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface

        #hash
        self.hash_manager = GbdManagerHash()

        # config
        self.config = {}
        self.authcfg = None
        self.gws_url = None

        self.authcfg_select.selectedConfigIdChanged.connect(self.update_auth)

        self.config_path = os.path.join(
            QgsApplication.qgisSettingsDirPath(),
            'GBD_WebSuite',
            'gws.json'
        )
        self.projectFolder = os.path.dirname(self.config_path)

        if os.path.exists(self.config_path):
            with open(self.config_path, 'r') as fp:
                self.config = json.load(fp)
        elif not os.path.exists(os.path.dirname(self.config_path)):
            os.makedirs(os.path.dirname(self.config_path))

        if self.config.get('authcfg'):
            self.authcfg_select.setConfigId(self.config.get('authcfg'))
        

        self.projects = None
        self.projekt = None
        self.title = None
        self.rowPosition = None
        self.path = None
        self.row = None
        self.font = None

        # connect functions to buttons
        self.button_save.clicked.connect(self.button_add_Project)
        self.button_delete_proj.clicked.connect(self.delete_Project)
        self.button_load_proj.clicked.connect(self.load_Project)
        self.button_load_proj.clicked.connect(self.open_Project)
        self.button_help.clicked.connect(self.open_Help)
        self.button_options.clicked.connect(self.doButtonOptions)

        # connect functions to signals
        QgsProject.instance().readProject.connect(self.project_Title_or_File)
        QgsProject.instance().writeProject.connect(self.project_Title_or_File)
        self.iface.newProjectCreated.connect(self.new_Project)
        self.table_proj.itemSelectionChanged.connect(self.get_row)
        #pb
        #self.uLE.countChanged.connect(self.onCountChanged)
        #self.countChanged.connect(self.setPB)

    #pb
    #def setPB(self, value):
        #self.pB.progressBar.setValue(value)

    '''def showProgressBar(self):
        self.pB = progressBar()
        self.pB.show()
        self.calc = External()
        self.calc.countChanged.connect(self.onCountChanged)
        self.calc.start()

    def onCountChanged(self, value):
        self.pB.progressBar.setValue(value)'''

    '''def sleeper(self, seconds):
        print('start')
        time.sleep(seconds)
        print('fertig')

    def showProgressBar(self):

        self.pB = progressBar()
        self.pB.show()
        self.pB.progressBar.setValue(1)
        t = threading.Thread(target = self.sleeper, args=(2,))
        t.start()
        t.join()
        self.pB.progressBar.setValue(10)'''

    def update_auth(self, authcfg):
        """update the auth config."""
        conf = QgsAuthMethodConfig()
        QgsApplication.authManager().loadAuthenticationConfig(
            authcfg, conf, True)
        if conf.uri():
            self.gws_url = QUrl(conf.uri())
            self.authcfg = authcfg
            self.config.update({
                'authcfg': authcfg
            })
            with open(self.config_path, 'w') as fp:
                json.dump(self.config, fp)
            self.projects = self.load_projects()
            if self.projects:
                self.populate_table(self.projects)
                self.aktuelles_projekt.setEnabled(True)
                self.liste_projekte.setEnabled(True)
                self.table_proj.setEnabled(True)
                self.project_Title_or_File()
            else:
                self.gws_url = None
                self.authcfg = None
        else:
            self.gws_url = None
            self.authcfg = None
        
    def doButtonOptions(self):

        ''' TODO: Function to open the advanced options main window, must be implemented '''

        button_options()

    def changedConfig(self):

        self.clear_Plugin()
        self.checkAuth()

    def set_font(self):

        '''
        Function to start the Plugin.
        '''

        f = self.iface.settingsMenu().font().toString().rsplit(",")[0]
        s = int(self.iface.settingsMenu().font().toString().rsplit(",")[1])
        self.font = QtGui.QFont(f, s)

    
    def load_projects(self):
        """Load Projects form GWS."""
        projects = gws_api_call(
            self.gws_url,
            'fsList',
            {},
            self.authcfg
        )
        if 'entries' not in projects:
            iface.messageBar.pushCritical(
                self.tr('Authentifizierung fehlgeschlagen!'),
                self.tr('Falsche Logindaten')
            )
            return None
        else:
            project_names = [
                path.rstrip('.config.cx') 
                for path in
                [ e.get('path') for e in projects.get('entries')]
                if path.endswith('.config.cx')
            ]
            return project_names


    def populate_table(self, projects):
        """Fill the table with the GWS projects."""
        nb_row = len(projects)
        nb_col = 2

        self.table_proj.setRowCount(nb_row)
        self.table_proj.setColumnCount(nb_col)

        for row in range(nb_row):
            item = QTableWidgetItem(projects[row])
            self.table_proj.setItem(row, 0, item)
            self.table_proj.setCellWidget(row, 1,
                EditButtonWidget(row, item.text(), self.gws_url, self.font))
        
        self.table_proj.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        self.table_proj.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)


    def project_Title_or_File(self):

        '''Fills data_projekt with the current project title (if not present use project file name)'''

        if self.authcfg:
            project = QgsProject.instance().baseName()
            self.title = QgsProject.instance().title()

            if not self.title:
                self.data_projekt.setText(project)

            else:
                self.data_projekt.setText(self.title)


    def new_Project(self):

        '''Emptys data_projekt if a entirely new project is started'''

        if self.authcfg:
            self.data_projekt.setText(QgsProject.instance().baseName())


    def button_add_Project(self):

        #pb
        # self.pB = progressBar()
        #self.pB.show()

        '''Function to add or change projects to the directory'''

        self.title = self.data_projekt.text()
        self.title = as_uid(self.title)
        self.data_projekt.setText(self.title)

        if self.title:
            self.rowPosition = self.table_proj.rowCount()
            QgsProject.instance().setTitle(self.title)
            items = []

            for row in range(self.rowPosition):
                item = self.table_proj.item(row, 0)
                item_text = item.text()
                items.append(item_text)

            if self.title in items:
                reply = QMessageBox.question(self.iface.mainWindow(),
                                            self.tr('Fortfahren?'),
                                            self.tr('Ein Projekt mit diesem Titel existiert bereits, soll dies ersetzt werden?'),
                                            QMessageBox.Yes,
                                            QMessageBox.No)

                if reply == QMessageBox.Yes:
                    self.add_Project()
                    test = self.table_proj.findItems(self.title, qgis.PyQt.QtCore.Qt.MatchExactly)
                    self.table_proj.removeRow(test[0].row())

                else:
                    pass

            else:
                self.add_Project()

        else:
            self.iface.messageBar().pushCritical(self.tr('Kein Titel'),
                                                self.tr('Bitte geben Sie einen Titel für das Projekt an!'))

    def get_row(self):

        '''get the marked project from the table_proj'''

        try:
            self.row = self.table_proj.currentRow()
            self.projekt = self.table_proj.item(self.row, 0).text()

        except:
            pass

    def delete_Project(self):

        '''Function to delete (or move to trash) projects'''

        if self.projekt:
            perm = QMessageBox
            ret = perm.question(self,
                                self.tr('Projekt löschen'),
                                self.tr('Soll das Projekt "')+ self.projekt + self.tr('" wirklich gelöscht werden?'),
                                perm.Yes | perm.No)

            if ret == perm.Yes:
                try:
                    answ = gws_api_call(self.gws_url,
                                        'fsList',
                                        {},
                                        self.authcfg)

                    for key, value in answ.items():
                        for values in value:
                            for keys, valuess in values.items():
                                if str( self.projekt + '/') in valuess:
                                    answw = gws_api_call(self.gws_url,
                                                        'fsDelete',
                                                        {'path': valuess},
                                                        self.authcfg)

                                elif str( self.projekt + '.config.cx') in valuess:
                                    answw = gws_api_call(self.gws_url,
                                                        'fsDelete',
                                                        {'path': valuess},
                                                        self.authcfg)

                    self.table_proj.removeRow(self.row)
                    self.projekt = None
                    self.iface.messageBar().pushSuccess(self.tr('Erfolgreich gelöscht!'),
                                                        self.tr('Ihr Projekt wurde in den Papierkorb verschoben.'))

                except:
                    self.iface.messageBar().pushCritical(self.tr('Löschen fehlgeschlagen!'),
                                                        self.tr('Ihr Projekt ')
                                                        + self.projekt
                                                        + self.tr(' konnte nicht gelöscht werden.'))

            if ret == perm.No:
                pass

        else:
            self.iface.messageBar().pushCritical(self.tr('Keine Auswahl'),
                                                self.tr('Bitte wählen Sie ein Projekt aus das sie löschen möchten.'))

    def load_Project(self):

        '''Load projects from the Websuite folder'''

        #if self.td:
        #    shutil.rmtree(self.td)

        #else:
        #    pass

        if self.projekt:

            pathlib.Path(self.projectFolder, self.projekt).mkdir(parents=True, exist_ok=True)

            if os.path.isfile(os.path.join(self.projectFolder, self.projekt, 'hash_list.json')):
                serverHashList = self.hash_manager.load_hash_list(
                    self.gws_url, self.authcfg, self.projekt)
                print('Server: ',serverHashList)

                with open (os.path.join(self.projectFolder, self.projekt, 'hash_list.json')) as fp:
                    localHashList = json.load(fp)
                    print('local: ',localHashList)

                downloadLayer = []

                try:
                    for key in serverHashList.keys():
                        if key in localHashList.keys():
                            if serverHashList[key][0] == localHashList[key][0]:
                                pass
                            else:
                                '''layer downloaden?!'''
                                downloadLayer.append(serverHashList[key][1])

                        else:
                            '''layer downloaden!'''
                            downloadLayer.append(serverHashList[key][1])

                    answ = gws_api_call(self.gws_url,
                                        'fsList',
                                        {},
                                        self.authcfg)

                    print(answ)

                    for key, value in answ.items():
                        for values in value:
                            for keys, valuess in values.items():
                                if valuess.startswith(str(self.projekt + '/')):
                                    if valuess.endswith('.qgs'):
                                        op_proj = gws_api_call(self.gws_url, 'fsRead', {'path': valuess}, self.authcfg)
                                        #self.path = os.path.join(self.td, self.projekt + '.qgs')
                                        self.path = os.path.join(self.projectFolder, self.projekt, self.projekt + '.qgs')
                                        with open(self.path, 'w') as save_proj:
                                            #save_proj = open(self.path, 'w')
                                            op_proj = op_proj['data'].decode('utf-8')
                                            save_proj.write(op_proj)

                                    elif valuess.endswith('.json'):
                                        op_hash = gws_api_call(self.gws_url, 'fsRead', {'path': valuess}, self.authcfg)
                                        pathH = os.path.join(self.projectFolder, self.projekt, valuess.split('/')[1])
                                        with open(pathH, 'w') as save_hash:
                                            #save_hash = open(pathH, 'w')
                                            op_hash = op_hash['data'].decode('utf-8')
                                            save_hash.write(op_hash)

                                    else:
                                        for downlay in downloadLayer:
                                            if valuess in downlay:
                                                op_layer = gws_api_call(self.gws_url,
                                                                        'fsRead',
                                                                        {'path': valuess},
                                                                        self.authcfg)
                                                #pathh = os.path.join(self.td, valuess.split('/')[1])
                                                pathh = os.path.join(self.projectFolder, self.projekt, valuess.split('/')[1])
                                                with open(pathh, 'w') as save_layer:
                                                    #save_layer = open(pathh, 'w')
                                                    op_layer = op_layer['data'].decode('utf-8')
                                                    save_layer.write(op_layer)
                                            else:
                                                pass

                                else:
                                    pass

                except NameError:
                    '''hier wird alles heruntergeladen?!'''

                    answ = gws_api_call(self.gws_url,
                                    'fsList',
                                    {},
                                    self.authcfg)

                    print(answ)

                    for key, value in answ.items():
                        for values in value:
                            for keys, valuess in values.items():
                                if valuess.startswith(str(self.projekt + '/')):
                                    if valuess.endswith('.qgs'):
                                        op_proj = gws_api_call(self.gws_url, 'fsRead', {'path': valuess}, self.authcfg)
                                        #self.path = os.path.join(self.td, self.projekt + '.qgs')
                                        self.path = os.path.join(self.projectFolder, self.projekt, self.projekt + '.qgs')
                                        with open(self.path, 'w') as save_proj:
                                            #save_proj = open(self.path, 'w')
                                            op_proj = op_proj['data'].decode('utf-8')
                                            save_proj.write(op_proj)

                                    elif valuess.endswith('.json'):
                                        op_hash = gws_api_call(self.gws_url, 'fsRead', {'path': valuess}, self.authcfg)
                                        pathH = os.path.join(self.projectFolder, self.projekt, valuess.split('/')[1])
                                        with open(pathH, 'w') as save_hash:
                                            #save_hash = open(pathH, 'w')
                                            op_hash = op_hash['data'].decode('utf-8')
                                            save_hash.write(op_hash)

                                    else:
                                        op_layer = gws_api_call(self.gws_url,
                                                                'fsRead',
                                                                {'path': valuess},
                                                                self.authcfg)
                                        #pathh = os.path.join(self.td, valuess.split('/')[1])
                                        pathh = os.path.join(self.projectFolder, self.projekt, valuess.split('/')[1])
                                        with open(pathh, 'w') as save_layer:
                                            #save_layer = open(pathh, 'w')
                                            op_layer = op_layer['data'].decode('utf-8')
                                            save_layer.write(op_layer)

                                else:
                                    pass


            else:

                answ = gws_api_call(self.gws_url,
                                    'fsList',
                                    {},
                                    self.authcfg)

                print(answ)

                for key, value in answ.items():
                    for values in value:
                        for keys, valuess in values.items():
                            if valuess.startswith(str(self.projekt + '/')):
                                if valuess.endswith('.qgs'):
                                    op_proj = gws_api_call(self.hostname, 'fsRead', {'path': valuess}, self.authcfg)
                                    #self.path = os.path.join(self.td, self.projekt + '.qgs')
                                    self.path = os.path.join(self.projectFolder, self.projekt, self.projekt + '.qgs')
                                    with open(self.path, 'w') as save_proj:
                                        #save_proj = open(self.path, 'w')
                                        op_proj = op_proj['data'].decode('utf-8')
                                        save_proj.write(op_proj)

                                elif valuess.endswith('.json'):
                                    op_hash = gws_api_call(self.gws_url, 'fsRead', {'path': valuess}, self.authcfg)
                                    pathH = os.path.join(self.projectFolder, self.projekt, valuess.split('/')[1])
                                    with open(pathH, 'w') as save_hash:
                                        #save_hash = open(pathH, 'w')
                                        op_hash = op_hash['data'].decode('utf-8')
                                        save_hash.write(op_hash)

                                else:
                                    op_layer = gws_api_call(self.gws_url,
                                                            'fsRead',
                                                            {'path': valuess},
                                                            self.authcfg)
                                    #pathh = os.path.join(self.td, valuess.split('/')[1])
                                    pathh = os.path.join(self.projectFolder, self.projekt, valuess.split('/')[1])
                                    with open(pathh, 'w') as save_layer:
                                        #save_layer = open(pathh, 'w')
                                        op_layer = op_layer['data'].decode('utf-8')
                                        save_layer.write(op_layer)

                            else:
                                pass

        else:
            self.iface.messageBar().pushCritical(self.tr('Laden fehlgeschlagen'),
                                                self.tr('Bitte wählen Sie ein Projekt aus!'))

    def open_Help(self):

        '''Open the Link to GWS-Website / Help'''

        webbrowser.open('https://gws.gbd-consult.de/', new = 0, autoraise = True)

    def clear_Plugin(self):

        '''emptys the Plugin'''

        self.authcfg = None
        self.table_proj.setRowCount(0)
        self.data_projekt.setText('')
        self.aktuelles_projekt.setEnabled(False)
        self.liste_projekte.setEnabled(False)
        self.table_proj.setEnabled(False)
        '''if self.td:
            shutil.rmtree(self.td)
            self.td = None

        else:
            pass'''

    def closeEvent(self, event):

        '''what happens if the plugin is closed'''


        self.clear_Plugin()
        self.closingPlugin.emit()
        event.accept()

    def open_Project(self):

        '''
        Just to open the Project, and to avoid, 
        that the project is read before the last layer is proper downloaded
        '''

        QgsProject.instance().read(self.path)

    def checkServer(self, max_tries = 0):
        while max_tries < 30:
            max_tries += 1
            a1 = r.get(self.hostname + 'project/' + self.title)
            if a1.status_code != 200:
                time.sleep(1)
            else:
                self.table_proj.insertRow(self.rowPosition)
                self.table_proj.setItem(self.rowPosition, 0, QTableWidgetItem(self.title))
                self.table_proj.setCellWidget(self.rowPosition, 1, EditButtonWidget(self.rowPosition, self.title, self.hostname, self.font))
                self.table_proj.scrollToItem(self.table_proj.item(self.rowPosition, 0))
                self.table_proj.setCurrentCell(self.rowPosition, 0)
                self.iface.messageBar().pushSuccess(self.tr('Projekt gespeichert'),
                                                    self.tr('Sie können es jetzt unter "')
                                                    + str(self.hostname
                                                    + 'project/'
                                                    + self.title)
                                                    + self.tr('" abrufen.'))
                '''self.iface.mainWindow().statusBar().clearMessage()'''
                break
        else:
            self.iface.messageBar().pushCritical(self.tr('GWS Fehler'),
                                                    self.tr('Server konnte noch nicht gestartet werden. Bei erneutem auftreten kontaktieren Sie bitte Ihren Admin.'))

    def add_Project(self):

        '''
        Function to add a new Project to the Server
        '''
        #pb
        #self.countChanged.emit(5)

        if QgsProject.instance().crs().authid()[:4] == 'EPSG':
            if QgsProject.instance().crs().mapUnits() == 0:

                QApplication.setOverrideCursor(Qt.WaitCursor)

                proj_crs = QgsProject.instance().crs().authid()

                if proj_crs != 'EPSG:3857':
                    inProj = pyproj.Proj(init='epsg:3857')
                    outProj = pyproj.Proj(init=proj_crs)

                    x1, y1= (644000, 5980000)
                    x3, y3 = pyproj.transform(inProj, outProj, x1, y1)
                    x2, y2 = (1680000, 7390000)
                    x4, y4 = pyproj.transform(inProj, outProj, x2, y2)

                    extentGermany = []
                    extentGermany.append(x3)
                    extentGermany.append(y3)
                    extentGermany.append(x4)
                    extentGermany.append(y4)

                    extentGermany = str(extentGermany)
                    extentGermany = extentGermany.replace(',', '')
                    
                else:
                    extentGermany = [644000, 5980000, 1680000, 7390000]
                    extentGermany = str(extentGermany)
                    extentGermany = extentGermany.replace(',', '')

                #proj_dir = tempfile.mkdtemp()
                pathlib.Path(self.projectFolder, self.title).mkdir(parents=True, exist_ok=True)
                proj_dir = os.path.join(self.projectFolder, self.title)

                hashListServer = self.hash_manager.load_hash_list(
                    self.gws_url, self.authcfg, self.title)
                print("hier :", hashListServer)

                change_layer_source = []
                changeMemoryLayers = []
                excludeLayers = []
                tileLayers = {}
                hashList = {}

                #pb
                # self.countChanged.emit(15)

                for layer in QgsProject.instance().mapLayers().values():
                    if layer.providerType() in {'ogr', 'memory'}:
                        '''self.iface.mainWindow().statusBar().showMessage("Bereite Layer "
                                                                        + layer.name()
                                                                        + " vor.")'''

                        #file_path = os.path.join(proj_dir, layer.name() + '.geojson')
                        file_path = os.path.join(proj_dir, layer.id() + '.geojson')

                        """QgsVectorFileWriter.writeAsVectorFormat(layer, 
                                                                            os.path.join(proj_dir,
                                                                                        layer.name()
                                                                                        + '.geojson'),
                                                                            'utf-8',
                                                                            driverName = 'GeoJson')"""
                        QgsVectorFileWriter.writeAsVectorFormat(layer, 
                                                                            file_path,
                                                                            'utf-8',
                                                                            driverName = 'GeoJson')

                        """lay_stor = os.path.getsize(os.path.join(proj_dir,
                                                                layer.name() 
                                                                + '.geojson'))"""
                        #lay_stor = os.path.getsize(file_path)
                        
                        #if lay_stor < 20 000 000:
                        #if lay_star < 1000000000:
                        change_layer_source.append(layer.id())
                        
                        #pb
                        #self.uLE = uploadLayersExternal(proj_dir, layer.name(), self.hostname, self.title, self.auth)
                        #self.uLE.countChanged.connect(self.onCountChanged)
                        #self.uLE.start()
                        #self.uLE.run(proj_dir, layer.name(), self.hostname, self.title, self.auth)
                        #self.countChanged.emit(25)

                        #buildHash = gbd_manager_hash.build_hash(path=file_path)
                        #hashList[layer.id()] = buildHash

                        #with open(os.path.join(proj_dir, layer.name() + '.geojson'), 'rb') as fp:
                        with open(os.path.join(proj_dir, layer.id() + '.geojson'), 'rb') as fp:
                            data = fp.read()

                            buildHash, hashStatus = self.hash_manager.build_hash(
                                data, hashListServer, layer.id())
                            print('buildHash: ',buildHash)
                            print('hashStatus: ',hashStatus)

                            if hashStatus is not None:
                                print('layer neu gesendet')
                                answ = gws_api_call(
                                    self.gws_url,
                                    'fsWrite',
                                    {'path': '/'
                                    + self.title
                                    + '/'
                                    #+ layer.name()
                                    + layer.id()
                                    + '.geojson',
                                    'data': data},
                                    authcfg )

                                hashList[layer.id()] = (buildHash, layer.name())

                            else:
                                print('layer passt wie er ist')
                                hashList[layer.id()] = (buildHash, layer.name())

                            #pb
                            # self.countChanged.emit(75)

                            if layer.providerType() == 'memory':
                                changeMemoryLayers.append(layer.id())

                        '''else:
                            excludeLayers.append(layer.name())
                            self.iface.messageBar().pushCritical(self.tr('Layer nicht hinzugefügt'),
                                                                layer.name()
                                                                + self.tr(' ist größer als 25 MB.'))'''

                    elif layer.providerType() == 'gdal':
                        excludeLayers.append(layer.name())
                        self.iface.messageBar().pushWarning(self.tr('Raster Layer'),
                                                            self.tr('Ihr Layer "')
                                                            + layer.name()
                                                            + self.tr('" wird nicht angezeigt, da es sich um einen Raster-Layer handelt.'))

                    elif layer.providerType() == 'wms':
                        if 'type=xyz' in layer.publicSource():
                            htmlText = layer.htmlMetadata()
                            url = htmlText.split('<td>GetCapabilitiesUrl</td><td>', 1)[1].split('</td>', 1)[0]
                            tileLayers[layer.name()] = url
                    else:
                        pass
                
                self.hash_manager.save_hash_list(
                    self.gws_url, self.authcfg, self.title, hashList, proj_dir)

                '''self.iface.mainWindow().statusBar().showMessage("Erstelle die Konfiguration.")'''
                QgsProject.instance().write(os.path.join(proj_dir, self.title + '.qgs'))
                tree = ET.parse(str(os.path.join(proj_dir, self.title + '.qgs')))
                root = tree.getroot()

                for maplayer in root.iter('maplayer'):
                    id = maplayer.find('id')
                    if id.text in change_layer_source:
                        datasource = maplayer.find('datasource')
                        #name = maplayer.find('layername')
                        #datasource.text = './' + name.text + '.geojson'
                        datasource.text = './' + id.text + '.geojson'

                    if id.text in changeMemoryLayers:
                        pe = maplayer.find('provider')
                        pe.attrib['encoding'] = 'UTF-8'
                        pe.text = 'ogr'

                    else:
                        pass

                for templayer in root.iter('layer-tree-layer'):
                    id = templayer.attrib['id']
                    if id in change_layer_source:
                        templayer.attrib['source'] = './' + id + '.geojson'
                    if id in changeMemoryLayers:
                        templayer.attrib['providerKey'] = 'ogr'

                tree.write(str(os.path.join(proj_dir, self.title + '.qgs')))

                with open(str(os.path.join(proj_dir, self.title + '.qgs')), 'rb') as fp:
                    data = fp.read()

                gws_api_call(
                    self.gws_url, 
                    'fsWrite', 
                    {'path': '/' + self.title + '/' + self.title + '.qgs', 'data': data},
                    authcfg
                )

                center = self.iface.mapCanvas().extent().center().toString()
                center = center.replace(",", " ")

                init_scale = str(self.iface.mapCanvas().scale())

                config = """ 
                    {
                        title """ + self.title + """
                        map.crs """ + '"' + proj_crs + '"' + """
                        map.center [""" + center + """]
                        map.zoom.initScale """ + init_scale + """
                        map.zoom.scales [1000000 500000 250000 150000 70000 50000 25000 10000 5000 2500 1000 500 250]
                        map.extentBuffer {{5000}}   
                        map.extent """ + extentGermany + """

                        api.actions+ { type "search"}

                        map.layers+  {
                            title """ + self.title + """
                            type "qgis" 
                            path "./""" + self.title + """/""" + self.title + """.qgs"
                            directRender ["wms"]
                        }
                    }"""

                #Dynamic Parts of the config.cx

                if excludeLayers:
                    pos = config.find('.qgs') + 5
                    config2 = config[:pos] + """
                    excludeLayers:
                        \t{"names": """ + str(excludeLayers) + """
                    }""" + config[pos:]
                    config = config2
                else:
                    pass


                if not tileLayers:
                    pass
                else:
                    for i in tileLayers:
                        config3 = config[:-1] + """map.layers+  {
                            title """ + '''"''' + i + '''"''' + """
                            type "tile"
                            url """ + '''"''' + tileLayers[i] + '''"''' +""" \n}
                            """ + config[-1:]
                        config = config3

                ###

                gws_api_call(
                    self.gws_url,
                    'fsWrite',
                    {'path': self.title + '.config.cx', 'data': config},
                    authcfg
                )

                self.checkServer()

                #pb
                # self.countChanged.emit(100)

                QApplication.restoreOverrideCursor()

            else:
                self.iface.messageBar().pushCritical(self.tr('CRS Fehler!'), self.tr('Bitte wählen Sie ein Koordinatensystem aus, das auf Meter als Einheit nutzt.'))
        
        else:
            self.ifac.messageBar().pushCritical(self.tr('CRS Fehler!'), self.tr('Bitte wählen sie ein EPSG-Koordinatensystem aus.'))

'''class uploadLayersExternal(QThread):

    countChanged = pyqtSignal(int)

    def __init__(self, proj_dir, layer, hostname, title, auth):
        QThread.__init__(self)

    def run(self):

        self.proj_dir = proj_dir
        self.layer = layer
        self.hostname = hostname
        self.title = title
        self.auth = auth

        with open(os.path.join(self.proj_dir, self.layer + '.geojson'), 'rb') as fp:
                                data = fp.read()
                                answ = gws_api_call(
                                    self.hostname,
                                    'fsWrite',
                                    {'path': '/'
                                    + self.title
                                    + '/'
                                    + self.layer
                                    + '.geojson',
                                    'data': data},
                                    auth = self.auth )
        self.countChanged.emit(10)

class External(QThread):
    """
    Runs a counter thread.
    """

    countChanged = pyqtSignal(int)

    def run(self, TIME_LIMIT=100):
        count = 0
        while count < TIME_LIMIT:
            count +=1
            time.sleep(1)
            self.countChanged.emit(count)'''


class EditButtonWidget(QWidget):

    '''
    Class that builds the Buttons in the "aktuelle Projekte" List
    '''
    
    def __init__(self, row, title, host, font, parent=None):
        super(EditButtonWidget,self).__init__(parent)

        # variables 
        self.title = title
        self.row = row
        self.font = font
        self.hostname = host

        ###Layout###

        self.layout = QHBoxLayout(self)

        self.layout.setContentsMargins(0,0,0,0)
        self.layout.setSpacing(0)

        self.b1 = QPushButton()
        self.b1.setToolTip(self.tr('Öffne die WebSuite'))
        self.b1.setIcon(QtGui.QIcon(':/plugins/gbd_websuite_plugin/icons/icon.png'))
        self.b1.clicked.connect(self.doButtonB1)

        self.b2 = QPushButton()
        self.b2.setToolTip(self.tr('Link anzeigen'))
        self.b2.setIcon(QtGui.QIcon(':/plugins/gbd_websuite_plugin/icons/link.png'))
        self.b2.clicked.connect(self.doButtonB2)

        self.layout.addWidget(self.b1)
        self.layout.addWidget(self.b2)

        self.setLayout(self.layout)

    def doButtonB1(self):

        '''Opens the Link to the weblink and the GBD WebSuite'''

        webbrowser.open( self.hostname 
                        + str('project/')
                        + self.title, 
                        new = 0, 
                        autoraise = True)
        
    def doButtonB2(self):

        '''Opens a QT-Window that shows the Link and allows it to copy it'''

        clipboard = QApplication.clipboard().setText(self.title)
        
        self.w = Window2(self.title, self.hostname, self.font)
        self.w.show()
       
class Window2(QMainWindow):

    '''
    Class that builds the MainWindow to show the Links to the different WebMaps
    '''
    def __init__(self, title, host, font):
        super().__init__()

        # variables
        self.title = title
        self.font = font
        self.hostname = host

        # Layout
        self.setGeometry(0,0,670,185)
        self.setWindowTitle(self.tr('Link zum Projekt: ') + self.title)

        self.pushButton = QPushButton(self)
        self.pushButton.setGeometry(qgis.PyQt.QtCore.QRect(540, 20, 110, 25))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText(self.tr("Link kopieren"))
        self.pushButton.clicked.connect(self.copy_link)
        self.pushButton.setFont(self.font)

        self.pushButton_2 = QPushButton(self)
        self.pushButton_2.setGeometry(qgis.PyQt.QtCore.QRect(540, 80, 110, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setText(self.tr("Link kopieren"))
        self.pushButton_2.setFont(self.font)

        self.pushButton_3 = QPushButton(self)
        self.pushButton_3.setGeometry(qgis.PyQt.QtCore.QRect(540, 140, 110, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setText(self.tr("Link kopieren"))
        self.pushButton_3.setFont(self.font)

        self.label = QLabel(self)
        self.label.setGeometry(qgis.PyQt.QtCore.QRect(20, 20, 67, 17))
        self.label.setObjectName("label")
        self.label.setText(self.tr("Webseite: "))
        self.label.setFont(self.font)

        self.label_2 = QLabel(self)
        self.label_2.setGeometry(qgis.PyQt.QtCore.QRect(20, 80, 67, 17))
        self.label_2.setObjectName("label_2")
        self.label_2.setText(self.tr("WMS: "))
        self.label_2.setFont(self.font)

        self.label_3 = QLabel(self)
        self.label_3.setGeometry(qgis.PyQt.QtCore.QRect(20, 140, 67, 17))
        self.label_3.setObjectName("label_3")
        self.label_3.setText(self.tr("WFS: "))
        self.label_3.setFont(self.font)

        self.textBrowser = QTextBrowser(self)
        self.textBrowser.setEnabled(True)
        self.textBrowser.setGeometry(qgis.PyQt.QtCore.QRect(90, 20, 450, 25))
        self.textBrowser.setOpenExternalLinks(True)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setText(self.hostname + str('project/' + self.title))

        self.textBrowser_2 = QTextBrowser(self)
        self.textBrowser_2.setGeometry(qgis.PyQt.QtCore.QRect(90, 80, 450, 25))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_2.setText(self.hostname + str('project/'))

        self.textBrowser_3 = QTextBrowser(self)
        self.textBrowser_3.setGeometry(qgis.PyQt.QtCore.QRect(90, 140, 450, 25))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.textBrowser_3.setText(self.hostname + str('project/'))
        
        self.center()

    def center(self):

        '''
        Center the Mainwindow in the active Screen
        https://stackoverflow.com/questions/20243637/pyqt4-center-window-on-active-screen
        '''
        
        frameGm = self.frameGeometry()
        screen = QApplication.desktop().screenNumber(QApplication.desktop().cursor().pos())
        centerPoint = QApplication.desktop().screenGeometry(screen).center()
        frameGm.moveCenter(centerPoint)
        self.move(frameGm.topLeft())
      
    def copy_link(self):

        QApplication.clipboard().setText(self.hostname + str('project/') + self.title)